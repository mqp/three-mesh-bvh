{"version":3,"file":"index.js","sources":["../src/IntersectionUtilities.js","../src/GeometryUtilities.js","../src/BoundsUtilities.js","../src/MeshBVHNode.js","../src/Constants.js","../src/BVHConstructionContext.js","../src/MeshBVH.js","../src/MeshBVHVisualizer.js","../src/index.js"],"sourcesContent":["// From THREE.js Mesh raycast\nvar vA = new THREE.Vector3();\nvar vB = new THREE.Vector3();\nvar vC = new THREE.Vector3();\n\nvar uvA = new THREE.Vector2();\nvar uvB = new THREE.Vector2();\nvar uvC = new THREE.Vector2();\n\nvar barycoord = new THREE.Vector3();\nvar intersectionPoint = new THREE.Vector3();\nvar intersectionPointWorld = new THREE.Vector3();\n\nfunction uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {\n\n\tTHREE.Triangle.getBarycoord( point, p1, p2, p3, barycoord );\n\n\tuv1.multiplyScalar( barycoord.x );\n\tuv2.multiplyScalar( barycoord.y );\n\tuv3.multiplyScalar( barycoord.z );\n\n\tuv1.add( uv2 ).add( uv3 );\n\n\treturn uv1.clone();\n\n}\n\nfunction checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\n\n\tvar intersect;\n\tif ( material.side === THREE.BackSide ) {\n\n\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t} else {\n\n\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== THREE.DoubleSide, point );\n\n\t}\n\n\tif ( intersect === null ) return null;\n\n\tintersectionPointWorld.copy( point );\n\tintersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n\tvar distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );\n\n\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\n\treturn {\n\t\tdistance: distance,\n\t\tpoint: intersectionPointWorld.clone(),\n\t\tobject: object\n\t};\n\n}\n\nfunction checkBufferGeometryIntersection( object, raycaster, ray, position, uv, a, b, c ) {\n\n\tvA.fromBufferAttribute( position, a );\n\tvB.fromBufferAttribute( position, b );\n\tvC.fromBufferAttribute( position, c );\n\n\tvar intersection = checkIntersection( object, object.material, raycaster, ray, vA, vB, vC, intersectionPoint );\n\n\tif ( intersection ) {\n\n\t\tif ( uv ) {\n\n\t\t\tuvA.fromBufferAttribute( uv, a );\n\t\t\tuvB.fromBufferAttribute( uv, b );\n\t\t\tuvC.fromBufferAttribute( uv, c );\n\n\t\t\tintersection.uv = uvIntersection( intersectionPoint, vA, vB, vC, uvA, uvB, uvC );\n\n\t\t}\n\n\t\tvar normal = new THREE.Vector3();\n\t\tintersection.face = new THREE.Face3( a, b, c, THREE.Triangle.getNormal( vA, vB, vC, normal ) );\n\t\tintersection.faceIndex = a;\n\n\t}\n\n\treturn intersection;\n\n}\n\nexport { uvIntersection, checkIntersection, checkBufferGeometryIntersection };\n","import { checkBufferGeometryIntersection } from './IntersectionUtilities.js';\n\n// For BVH code specifically. Does not check morph targets\n// Copied from mesh raycasting\n// Ripped an modified from the THREE.js source in Mesh.CS\nconst intersectTri = ( mesh, geo, raycaster, ray, tri, intersections ) => {\n\n\tconst triOffset = tri * 3;\n\tconst a = geo.index.getX( triOffset );\n\tconst b = geo.index.getX( triOffset + 1 );\n\tconst c = geo.index.getX( triOffset + 2 );\n\n\tconst intersection = checkBufferGeometryIntersection( mesh, raycaster, ray, geo.attributes.position, geo.attributes.uv, a, b, c );\n\n\tif ( intersection ) {\n\n\t\tintersection.faceIndex = tri;\n\t\tif ( intersections ) intersections.push( intersection );\n\t\treturn intersection;\n\n\t}\n\n\treturn null;\n\n};\n\nconst intersectTris = ( mesh, geo, raycaster, ray, offset, count, intersections ) => {\n\n\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\n\n\t\tintersectTri( mesh, geo, raycaster, ray, i, intersections );\n\n\t}\n\n};\n\nconst intersectClosestTri = ( mesh, geo, raycaster, ray, offset, count ) => {\n\n\tlet dist = Infinity;\n\tlet res = null;\n\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\n\n\t\tconst intersection = intersectTri( mesh, geo, raycaster, ray, i );\n\t\tif ( intersection && intersection.distance < dist ) {\n\n\t\t\tres = intersection;\n\t\t\tdist = intersection.distance;\n\n\t\t}\n\n\t}\n\n\treturn res;\n\n};\n\nexport {\n\tintersectTri, intersectTris, intersectClosestTri\n};\n","// Returns a Float32Array representing the bounds data for box.\nfunction boundsToArray( bx ) {\n\n\tconst arr = new Float32Array( 6 );\n\n\tarr[ 0 ] = bx.min.x;\n\tarr[ 1 ] = bx.min.y;\n\tarr[ 2 ] = bx.min.z;\n\n\tarr[ 3 ] = bx.max.x;\n\tarr[ 4 ] = bx.max.y;\n\tarr[ 5 ] = bx.max.z;\n\n\treturn arr;\n\n}\n\nfunction arrayToBox( arr, target ) {\n\n\ttarget.min.x = arr[ 0 ];\n\ttarget.min.y = arr[ 1 ];\n\ttarget.min.z = arr[ 2 ];\n\n\ttarget.max.x = arr[ 3 ];\n\ttarget.max.y = arr[ 4 ];\n\ttarget.max.z = arr[ 5 ];\n\n\treturn target;\n\n}\n\nfunction getLongestEdgeIndex( bounds ) {\n\n\tlet splitDimIdx = - 1;\n\tlet splitDist = - Infinity;\n\n\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\tconst dist = bounds[ i + 3 ] - bounds[ i ];\n\t\tif ( dist > splitDist ) {\n\n\t\t\tsplitDist = dist;\n\t\t\tsplitDimIdx = i;\n\n\t\t}\n\n\t}\n\n\treturn splitDimIdx;\n\n}\n\nexport { boundsToArray, arrayToBox, getLongestEdgeIndex };\n","import { intersectTris, intersectClosestTri } from './GeometryUtilities.js';\nimport { arrayToBox } from './BoundsUtilities.js';\n\nconst boundingBox = new THREE.Box3();\nconst boxIntersection = new THREE.Vector3();\nconst xyzFields = [ 'x', 'y', 'z' ];\n\nexport default\nclass MeshBVHNode {\n\n\tconstructor() {\n\n\t\t// internal nodes have boundingData, left, right, and splitAxis\n\t\t// leaf nodes have offset and count (referring to primitives in the mesh geometry)\n\n\t}\n\n\tintersectRay( ray, target ) {\n\n\t\tarrayToBox( this.boundingData, boundingBox );\n\n\t\treturn ray.intersectBox( boundingBox, target );\n\n\t}\n\n\traycast( mesh, raycaster, ray, intersects ) {\n\n\t\tif ( this.count ) intersectTris( mesh, mesh.geometry, raycaster, ray, this.offset, this.count, intersects );\n\t\telse {\n\n\t\t\tif ( this.left.intersectRay( ray, boxIntersection ) )\n\t\t\t\tthis.left.raycast( mesh, raycaster, ray, intersects );\n\t\t\tif ( this.right.intersectRay( ray, boxIntersection ) )\n\t\t\t\tthis.right.raycast( mesh, raycaster, ray, intersects );\n\n\t\t}\n\n\t}\n\n\traycastFirst( mesh, raycaster, ray ) {\n\n\t\tif ( this.count ) {\n\n\t\t\treturn intersectClosestTri( mesh, mesh.geometry, raycaster, ray, this.offset, this.count );\n\n\t\t} else {\n\n\n\t\t\t// consider the position of the split plane with respect to the oncoming ray; whichever direction\n\t\t\t// the ray is coming from, look for an intersection among that side of the tree first\n\t\t\tconst splitAxis = this.splitAxis;\n\t\t\tconst xyzAxis = xyzFields[ splitAxis ];\n\t\t\tconst rayDir = ray.direction[ xyzAxis ];\n\t\t\tconst leftToRight = rayDir >= 0;\n\n\t\t\t// c1 is the child to check first\n\t\t\tlet c1, c2;\n\t\t\tif ( leftToRight ) {\n\n\t\t\t\tc1 = this.left;\n\t\t\t\tc2 = this.right;\n\n\t\t\t} else {\n\n\t\t\t\tc1 = this.right;\n\t\t\t\tc2 = this.left;\n\n\t\t\t}\n\n\t\t\tconst c1Intersection = c1.intersectRay( ray, boxIntersection );\n\t\t\tconst c1Result = c1Intersection ? c1.raycastFirst( mesh, raycaster, ray ) : null;\n\n\t\t\t// if we got an intersection in the first node and it's closer than the second node's bounding\n\t\t\t// box, we don't need to consider the second node because it couldn't possibly be a better result\n\t\t\tif ( c1Result ) {\n\n\t\t\t\t// check only along the split axis\n\t\t\t\tconst rayOrig = ray.origin[ xyzAxis ];\n\t\t\t\tconst toPoint = rayOrig - c1Result.point[ xyzAxis ];\n\t\t\t\tconst toChild1 = rayOrig - c2.boundingData[ splitAxis ];\n\t\t\t\tconst toChild2 = rayOrig - c2.boundingData[ splitAxis + 3 ];\n\n\t\t\t\tconst toPointSq = toPoint * toPoint;\n\t\t\t\tif ( toPointSq <= toChild1 * toChild1 && toPointSq <= toChild2 * toChild2 ) {\n\n\t\t\t\t\treturn c1Result;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// either there was no intersection in the first node, or there could still be a closer\n\t\t\t// intersection in the second, so check the second node and then take the better of the two\n\t\t\tconst c2Intersection = c2.intersectRay( ray, boxIntersection );\n\t\t\tconst c2Result = c2Intersection ? c2.raycastFirst( mesh, raycaster, ray ) : null;\n\n\t\t\tif ( c1Result && c2Result ) {\n\n\t\t\t\treturn c1Result.distance <= c2Result.distance ? c1Result : c2Result;\n\n\t\t\t} else {\n\n\t\t\t\treturn c1Result || c2Result || null;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n","// Split strategy constants\nexport const CENTER = 0;\nexport const AVERAGE = 1;\nexport const SAH = 2;\n","import { arrayToBox, getLongestEdgeIndex } from './BoundsUtilities.js';\nimport { CENTER, AVERAGE, SAH } from './Constants.js';\n\nconst xyzFields = [ 'x', 'y', 'z' ];\n\nfunction getTriangleCount( geo ) {\n\n\treturn geo.index ? ( geo.index.count / 3 ) : ( geo.attributes.position.count / 3 );\n\n}\n\n// TODO: This could probably be optimizied to not dig so deeply into an object\n// and reust some of the fetch values in some cases\nfunction getBufferGeometryVertexElem( geo, tri, vert, elem ) {\n\n\treturn geo.attributes.position.array[ ( geo.index ? geo.index.array[ 3 * tri + vert ] : ( 3 * tri + vert ) ) * 3 + elem ];\n\n}\n\n// precomputes data about each triangle required for quickly calculating tree splits:\n//\n// - bounds: an array of size tris.length * 6 where triangle i maps to a\n//   [x_min, x_max, y_min, y_max, z_min, z_max] tuple starting at index i * 6,\n//   representing the minimum and maximum extent in each dimension of triangle i\n//\n// - centroids: an array of size tris.length * 3 where triangle i maps to an [x, y, z] triplet\n//   starting at index i * 3, representing the centroid of triangle i\n//\nfunction computeTriangleData( geo ) {\n\n\tconst triCount = getTriangleCount( geo );\n\tconst bounds = new Float32Array( triCount * 6 );\n\tconst centroids = new Float32Array( triCount * 3 );\n\n\tfor ( let tri = 0; tri < triCount; tri ++ ) {\n\n\t\tfor ( let el = 0; el < 3; el ++ ) {\n\n\t\t\tconst a = getBufferGeometryVertexElem( geo, tri, 0, el );\n\t\t\tconst b = getBufferGeometryVertexElem( geo, tri, 1, el );\n\t\t\tconst c = getBufferGeometryVertexElem( geo, tri, 2, el );\n\t\t\tbounds[ tri * 6 + el * 2 ] = Math.min( a, b, c );\n\t\t\tbounds[ tri * 6 + el * 2 + 1 ] = Math.max( a, b, c );\n\t\t\tcentroids[ tri * 3 + el ] = ( a + b + c ) / 3;\n\n\t\t}\n\n\t}\n\n\treturn { bounds, centroids };\n\n}\n\nconst boxtemp = new THREE.Box3();\n\nexport default class BVHConstructionContext {\n\n\tconstructor( geo, options ) {\n\n\t\tthis.geo = geo;\n\t\tthis.options = options;\n\n\t\tconst data = computeTriangleData( geo );\n\t\tthis.centroids = data.centroids;\n\t\tthis.bounds = data.bounds;\n\n\t\t// a list of every available triangle index\n\t\tconst triCount = getTriangleCount( geo );\n\t\tthis.tris = new Array( triCount );\n\t\tfor ( let i = 0; i < triCount; i ++ ) this.tris[ i ] = i;\n\n\t\t// SAH Initialization\n\t\tthis.sahplanes = null;\n\t\tif ( options.strategy === SAH ) {\n\n\t\t\tthis.sahplanes = [ new Array( triCount ), new Array( triCount ), new Array( triCount ) ];\n\t\t\tfor ( let tri = 0; tri < triCount; tri ++ ) {\n\n\t\t\t\tfor ( let el = 0; el < 3; el ++ ) {\n\n\t\t\t\t\tthis.sahplanes[ el ][ tri ] = { p: this.centroids[ tri * 3 + el ], tri };\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// returns the average coordinate on the specified axis of the all the provided triangles\n\tgetAverage( offset, count, axis ) {\n\n\t\tlet avg = 0;\n\t\tconst centroids = this.centroids;\n\t\tconst tris = this.tris;\n\n\t\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\n\n\t\t\tavg += centroids[ tris[ i ] * 3 + axis ];\n\n\t\t}\n\n\t\treturn avg / count;\n\n\t}\n\n\t// computes the union of the bounds of all of the given triangles and puts the resulting box in target\n\tgetBounds( offset, count, target ) {\n\n\t\tlet minx = Infinity;\n\t\tlet miny = Infinity;\n\t\tlet minz = Infinity;\n\t\tlet maxx = - Infinity;\n\t\tlet maxy = - Infinity;\n\t\tlet maxz = - Infinity;\n\t\tconst bounds = this.bounds;\n\t\tconst tris = this.tris;\n\n\t\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\n\n\t\t\tconst tri = tris[ i ];\n\n\t\t\tminx = Math.min( minx, bounds[ tri * 6 + 0 ] );\n\t\t\tmaxx = Math.max( maxx, bounds[ tri * 6 + 1 ] );\n\t\t\tminy = Math.min( miny, bounds[ tri * 6 + 2 ] );\n\t\t\tmaxy = Math.max( maxy, bounds[ tri * 6 + 3 ] );\n\t\t\tminz = Math.min( minz, bounds[ tri * 6 + 4 ] );\n\t\t\tmaxz = Math.max( maxz, bounds[ tri * 6 + 5 ] );\n\n\t\t}\n\n\t\ttarget[ 0 ] = minx;\n\t\ttarget[ 1 ] = miny;\n\t\ttarget[ 2 ] = minz;\n\n\t\ttarget[ 3 ] = maxx;\n\t\ttarget[ 4 ] = maxy;\n\t\ttarget[ 5 ] = maxz;\n\n\t\treturn target;\n\n\t}\n\n\t// writes entries into a new geometry index (target) with the vertices of triangles from\n\t// offset through count\n\twriteReorderedIndices( offset, count, target ) {\n\n\t\tconst tris = this.tris;\n\t\tconst oldIndices = this.geo.index ? this.geo.index.array : null;\n\n\t\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\n\n\t\t\tconst oldTri = tris[ i ];\n\t\t\ttarget[ 3 * i + 0 ] = oldIndices ? oldIndices[ 3 * oldTri + 0 ] : 3 * oldTri + 0;\n\t\t\ttarget[ 3 * i + 1 ] = oldIndices ? oldIndices[ 3 * oldTri + 1 ] : 3 * oldTri + 1;\n\t\t\ttarget[ 3 * i + 2 ] = oldIndices ? oldIndices[ 3 * oldTri + 2 ] : 3 * oldTri + 1;\n\n\t\t}\n\n\t}\n\n\t// reorders `tris` such that for `count` elements after `offset`, elements on the left side of the split\n\t// will be on the left and elements on the right side of the split will be on the right. returns the index\n\t// of the first element on the right side, or offset + count if there are no elements on the right side.\n\tpartition( offset, count, split ) {\n\n\t\tlet left = offset;\n\t\tlet right = offset + count - 1;\n\t\tconst pos = split.pos;\n\t\tconst axis = split.axis;\n\t\tconst tris = this.tris;\n\t\tconst centroids = this.centroids;\n\n\t\t// hoare partitioning, see e.g. https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme\n\t\twhile ( true ) {\n\n\t\t\twhile ( left <= right && centroids[ tris[ left ] * 3 + axis ] < pos ) {\n\n\t\t\t\tleft ++;\n\n\t\t\t}\n\n\t\t\twhile ( left <= right && centroids[ tris[ right ] * 3 + axis ] >= pos ) {\n\n\t\t\t\tright --;\n\n\t\t\t}\n\n\t\t\tif ( left < right ) {\n\n\t\t\t\tlet tmp = tris[ left ];\n\t\t\t\ttris[ left ] = tris[ right ];\n\t\t\t\ttris[ right ] = tmp;\n\t\t\t\tleft ++;\n\t\t\t\tright --;\n\n\t\t\t} else {\n\n\t\t\t\treturn left;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tgetOptimalSplit( bounds, offset, count, strategy ) {\n\n\t\tlet axis = - 1;\n\t\tlet pos = 0;\n\n\t\t// Center\n\t\tif ( strategy === CENTER ) {\n\n\t\t\taxis = getLongestEdgeIndex( bounds );\n\t\t\tif ( axis !== - 1 ) {\n\n\t\t\t\tpos = ( bounds[ axis + 3 ] + bounds[ axis ] ) / 2;\n\n\t\t\t}\n\n\t\t} else if ( strategy === AVERAGE ) {\n\n\t\t\taxis = getLongestEdgeIndex( bounds );\n\t\t\tif ( axis !== - 1 ) {\n\n\t\t\t\tpos = this.getAverage( offset, count, axis );\n\n\t\t\t}\n\n\t\t} else if ( strategy === SAH ) {\n\n\t\t\t// Surface Area Heuristic\n\t\t\t// In order to make this code more terse, the x, y, and z\n\t\t\t// variables of various structures have been stuffed into\n\t\t\t// 0, 1, and 2 array indices so they can be easily computed\n\t\t\t// and accessed within array iteration\n\n\t\t\t// Cost values defineed for operations. We're using bounds for traversal, so\n\t\t\t// the cost of traversing one more layer is more than intersecting a triangle.\n\t\t\tconst TRAVERSAL_COST = 3;\n\t\t\tconst INTERSECTION_COST = 1;\n\t\t\tconst tris = this.tris;\n\t\t\tconst bb = arrayToBox( bounds, boxtemp );\n\n\t\t\t// Define the width, height, and depth of the bounds as a box\n\t\t\tconst dim = [\n\t\t\t\tbb.max.x - bb.min.x,\n\t\t\t\tbb.max.y - bb.min.y,\n\t\t\t\tbb.max.z - bb.min.z\n\t\t\t];\n\t\t\tconst sa = 2 * ( dim[ 0 ] * dim[ 1 ] + dim[ 0 ] * dim[ 2 ] + dim[ 1 ] * dim[ 2 ] );\n\n\t\t\t// Get the precalculated planes based for the triangles we're\n\t\t\t// testing here\n\t\t\tconst filteredLists = [[], [], []];\n\t\t\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\n\n\t\t\t\tlet t = tris[ i ];\n\t\t\t\tfor ( let v = 0; v < 3; v ++ ) {\n\n\t\t\t\t\tfilteredLists[ v ].push( this.sahplanes[ v ][ t ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tfilteredLists.forEach( planes => planes.sort( ( a, b ) => a.p - b.p ) );\n\n\t\t\t// this bounds surface area, left bound SA, left triangles, right bound SA, right triangles\n\t\t\tconst getCost = ( sa, sal, nl, sar, nr ) =>\n\t\t\t\t  TRAVERSAL_COST + INTERSECTION_COST * ( ( sal / sa ) * nl + ( sar / sa ) * nr );\n\n\t\t\t// the cost of _not_ splitting into smaller bounds\n\t\t\tconst noSplitCost = INTERSECTION_COST * count;\n\n\t\t\taxis = - 1;\n\t\t\tlet bestCost = noSplitCost;\n\t\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\t\t// o1 and o2 represent the _other_ two axes in the\n\t\t\t\t// the space. So if we're checking the x (0) dimension,\n\t\t\t\t// then o1 and o2 would be y and z (1 and 2)\n\t\t\t\tconst o1 = ( i + 1 ) % 3;\n\t\t\t\tconst o2 = ( i + 2 ) % 3;\n\n\t\t\t\tconst bmin = bb.min[ xyzFields[ i ] ];\n\t\t\t\tconst bmax = bb.max[ xyzFields[ i ] ];\n\t\t\t\tconst planes = filteredLists[ i ];\n\n\t\t\t\t// The number of left and right triangles on either side\n\t\t\t\t// given the current split\n\t\t\t\tlet nl = 0;\n\t\t\t\tlet nr = count;\n\t\t\t\tfor ( let p = 0; p < planes.length; p ++ ) {\n\n\t\t\t\t\tconst pinfo = planes[ p ];\n\n\t\t\t\t\t// As the plane moves, we have to increment or decrement the\n\t\t\t\t\t// number of triangles on either side of the plane\n\t\t\t\t\tnl ++;\n\t\t\t\t\tnr --;\n\n\t\t\t\t\t// the distance from the plane to the edge of the broader bounds\n\t\t\t\t\tconst ldim = pinfo.p - bmin;\n\t\t\t\t\tconst rdim = bmax - pinfo.p;\n\n\t\t\t\t\t// same for the other two dimensions\n\t\t\t\t\tlet ldimo1 = dim[ o1 ], rdimo1 = dim[ o1 ];\n\t\t\t\t\tlet ldimo2 = dim[ o2 ], rdimo2 = dim[ o2 ];\n\n\t\t\t\t\t/*\n\t\t\t\t\t// compute the other bounding planes for the box\n\t\t\t\t\t// if only the current triangles are considered to\n\t\t\t\t\t// be in the box\n\t\t\t\t\t// This is really slow and probably not really worth it\n\t\t\t\t\tconst o1planes = this.sahplanes[o1];\n\t\t\t\t\tconst o2planes = this.sahplanes[o2];\n\t\t\t\t\tlet lmin = Infinity, lmax = -Infinity;\n\t\t\t\t\tlet rmin = Infinity, rmax = -Infinity;\n\t\t\t\t\tplanes.forEach((p, i) => {\n\t\t\t\t\tconst tri2 = p.tri * 2;\n\t\t\t\t\tconst inf1 = o1planes[tri2 + 0];\n\t\t\t\t\tconst inf2 = o1planes[tri2 + 1];\n\t\t\t\t\tif (i <= nl) {\n\t\t\t\t\tlmin = Math.min(inf1.p, inf2.p, lmin);\n\t\t\t\t\tlmax = Math.max(inf1.p, inf2.p, lmax);\n\t\t\t\t\t}\n\t\t\t\t\tif (i >= nr) {\n\t\t\t\t\trmin = Math.min(inf1.p, inf2.p, rmin);\n\t\t\t\t\trmax = Math.max(inf1.p, inf2.p, rmax);\n\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\tldimo1 = Math.min(lmax - lmin, ldimo1);\n\t\t\t\t\trdimo1 = Math.min(rmax - rmin, rdimo1);\n\n\t\t\t\t\tplanes.forEach((p, i) => {\n\t\t\t\t\tconst tri2 = p.tri * 2;\n\t\t\t\t\tconst inf1 = o2planes[tri2 + 0];\n\t\t\t\t\tconst inf2 = o2planes[tri2 + 1];\n\t\t\t\t\tif (i <= nl) {\n\t\t\t\t\tlmin = Math.min(inf1.p, inf2.p, lmin);\n\t\t\t\t\tlmax = Math.max(inf1.p, inf2.p, lmax);\n\t\t\t\t\t}\n\t\t\t\t\tif (i >= nr) {\n\t\t\t\t\trmin = Math.min(inf1.p, inf2.p, rmin);\n\t\t\t\t\trmax = Math.max(inf1.p, inf2.p, rmax);\n\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\tldimo2 = Math.min(lmax - lmin, ldimo2);\n\t\t\t\t\trdimo2 = Math.min(rmax - rmin, rdimo2);\n\t\t\t\t\t*/\n\n\t\t\t\t\t// surface areas and cost\n\t\t\t\t\tconst sal = 2 * ( ldimo1 * ldimo2 + ldimo1 * ldim + ldimo2 * ldim );\n\t\t\t\t\tconst sar = 2 * ( rdimo1 * rdimo2 + rdimo1 * rdim + rdimo2 * rdim );\n\t\t\t\t\tconst cost = getCost( sa, sal, nl, sar, nr );\n\n\t\t\t\t\tif ( cost < bestCost ) {\n\n\t\t\t\t\t\taxis = i;\n\t\t\t\t\t\tpos = pinfo.p;\n\t\t\t\t\t\tbestCost = cost;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn { axis, pos };\n\n\t}\n\n}\n","import MeshBVHNode from './MeshBVHNode.js';\nimport BVHConstructionContext from './BVHConstructionContext.js';\nimport { boundsToArray } from './BoundsUtilities.js';\nimport { CENTER } from './Constants.js';\n\nexport default class MeshBVH extends MeshBVHNode {\n\n\tconstructor( geo, options = {} ) {\n\n\t\tsuper();\n\n\t\t// default options\n\t\toptions = Object.assign( {\n\n\t\t\tstrategy: CENTER,\n\t\t\tmaxDepth: 40,\n\t\t\tmaxLeafTris: 10,\n\t\t\tverbose: true\n\n\t\t}, options );\n\t\toptions.strategy = Math.max( 0, Math.min( 2, options.strategy ) );\n\n\t\tif ( geo.isBufferGeometry ) {\n\n\t\t\tthis._root = this._buildTree( geo, options );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'MeshBVH: Only BufferGeometries are supported.' );\n\n\t\t}\n\n\t}\n\n\t/* Private Functions */\n\t_buildTree( geo, options ) {\n\n\t\tconst ctx = new BVHConstructionContext( geo, options );\n\t\tconst verticesLength = geo.attributes.position.count;\n\t\tconst indicesLength = ctx.tris.length * 3;\n\t\tconst indices = new ( verticesLength < 65536 ? Uint16Array : Uint32Array )( indicesLength );\n\t\tlet reachedMaxDepth = false;\n\n\t\t// either recursively splits the given node, creating left and right subtrees for it, or makes it a leaf node,\n\t\t// recording the offset and count of its triangles and writing them into the reordered geometry index.\n\t\tconst splitNode = ( node, offset, count, depth = 0 ) => {\n\n\t\t\tif ( depth >= options.maxDepth ) {\n\n\t\t\t\treachedMaxDepth = true;\n\n\t\t\t}\n\n\t\t\t// early out if we've met our capacity\n\t\t\tif ( count <= options.maxLeafTris || depth >= options.maxDepth ) {\n\n\t\t\t\tctx.writeReorderedIndices( offset, count, indices );\n\t\t\t\tnode.offset = offset;\n\t\t\t\tnode.count = count;\n\t\t\t\treturn node;\n\n\t\t\t}\n\n\t\t\t// Find where to split the volume\n\t\t\tconst split = ctx.getOptimalSplit( node.boundingData, offset, count, options.strategy );\n\t\t\tif ( split.axis === - 1 ) {\n\n\t\t\t\tctx.writeReorderedIndices( offset, count, indices );\n\t\t\t\tnode.offset = offset;\n\t\t\t\tnode.count = count;\n\t\t\t\treturn node;\n\n\t\t\t}\n\n\t\t\tconst splitOffset = ctx.partition( offset, count, split );\n\n\t\t\t// create the two new child nodes\n\t\t\tif ( splitOffset === offset || splitOffset === offset + count ) {\n\n\t\t\t\tctx.writeReorderedIndices( offset, count, indices );\n\t\t\t\tnode.offset = offset;\n\t\t\t\tnode.count = count;\n\n\t\t\t} else {\n\n\t\t\t\tnode.splitAxis = split.axis;\n\n\t\t\t\t// create the left child and compute its bounding box\n\t\t\t\tconst left = node.left = new MeshBVHNode();\n\t\t\t\tconst lstart = offset, lcount = splitOffset - offset;\n\t\t\t\tleft.boundingData = ctx.getBounds( lstart, lcount, new Float32Array( 6 ) );\n\t\t\t\tsplitNode( left, lstart, lcount, depth + 1 );\n\n\t\t\t\t// repeat for right\n\t\t\t\tconst right = node.right = new MeshBVHNode();\n\t\t\t\tconst rstart = splitOffset, rcount = count - lcount;\n\t\t\t\tright.boundingData = ctx.getBounds( rstart, rcount, new Float32Array( 6 ) );\n\t\t\t\tsplitNode( right, rstart, rcount, depth + 1 );\n\n\t\t\t}\n\n\t\t\treturn node;\n\n\t\t};\n\n\t\tif ( ! geo.boundingBox ) geo.computeBoundingBox();\n\t\tthis.boundingData = boundsToArray( geo.boundingBox );\n\t\tthis.index = new THREE.BufferAttribute( indices, 1 );\n\t\tsplitNode( this, 0, ctx.tris.length );\n\n\t\tif ( reachedMaxDepth && options.verbose ) {\n\n\t\t\tconsole.warn( `MeshBVH: Max depth of ${ options.maxDepth } reached when generating BVH. Consider increasing maxDepth.` );\n\t\t\tconsole.warn( this, geo );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n","import { arrayToBox } from './BoundsUtilities.js';\n\nconst wiremat = new THREE.LineBasicMaterial( { color: 0x00FF88, transparent: true, opacity: 0.3 } );\nconst boxGeom = new THREE.Box3Helper().geometry;\nlet boundingBox = new THREE.Box3();\n\nclass MeshBVHVisualizer extends THREE.Object3D {\n\n\tconstructor( mesh, depth = 10 ) {\n\n\t\tsuper();\n\n\t\tthis.depth = depth;\n\t\tthis._oldDepth = - 1;\n\t\tthis._mesh = mesh;\n\t\tthis._boundsTree = null;\n\n\t\tthis.update();\n\n\t}\n\n\tupdate() {\n\n\t\tif ( this._mesh.geometry.boundsTree !== this._boundsTree || this._oldDepth !== this.depth ) {\n\n\t\t\tthis._oldDepth = this.depth;\n\t\t\tthis._boundsTree = this._mesh.geometry.boundsTree;\n\n\t\t\tlet requiredChildren = 0;\n\t\t\tif ( this._boundsTree ) {\n\n\t\t\t\tconst recurse = ( n, d ) => {\n\n\t\t\t\t\tlet isLeaf = 'count' in n;\n\n\t\t\t\t\tif ( d === this.depth ) return;\n\n\t\t\t\t\tif ( d === this.depth - 1 || isLeaf ) {\n\n\t\t\t\t\t\tlet m = requiredChildren < this.children.length ? this.children[ requiredChildren ] : null;\n\t\t\t\t\t\tif ( ! m ) {\n\n\t\t\t\t\t\t\tm = new THREE.LineSegments( boxGeom, wiremat );\n\t\t\t\t\t\t\tm.raycast = () => [];\n\t\t\t\t\t\t\tthis.add( m );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\trequiredChildren ++;\n\t\t\t\t\t\tarrayToBox( n.boundingData, boundingBox );\n\t\t\t\t\t\tboundingBox.getCenter( m.position );\n\t\t\t\t\t\tm.scale.subVectors( boundingBox.max, boundingBox.min ).multiplyScalar( 0.5 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! isLeaf ) {\n\n\t\t\t\t\t\trecurse( n.left, d + 1 );\n\t\t\t\t\t\trecurse( n.right, d + 1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t\trecurse( this._boundsTree._root, 0 );\n\n\t\t\t}\n\n\t\t\twhile ( this.children.length > requiredChildren ) this.remove( this.children.pop() );\n\n\t\t}\n\n\t\tthis.position.copy( this._mesh.position );\n\t\tthis.rotation.copy( this._mesh.rotation );\n\t\tthis.scale.copy( this._mesh.scale );\n\n\t}\n\n}\n\nexport default MeshBVHVisualizer;\n","import MeshBVH from './MeshBVH.js';\nimport Visualizer from './MeshBVHVisualizer.js';\nimport { CENTER, AVERAGE, SAH } from './Constants.js';\n\nconst ray = new THREE.Ray();\nconst tmpInverseMatrix = new THREE.Matrix4();\nconst origMeshRaycastFunc = THREE.Mesh.prototype.raycast;\n\nfunction acceleratedRaycast( raycaster, intersects ) {\n\n\tif ( this.geometry.boundsTree ) {\n\n\t\tif ( this.material === undefined ) return;\n\n\t\ttmpInverseMatrix.getInverse( this.matrixWorld );\n\t\tray.copy( raycaster.ray ).applyMatrix4( tmpInverseMatrix );\n\n\t\tif ( raycaster.firstHitOnly === true ) {\n\n\t\t\tconst res = this.geometry.boundsTree.raycastFirst( this, raycaster, ray );\n\t\t\tif ( res ) intersects.push( res );\n\n\t\t} else {\n\n\t\t\tthis.geometry.boundsTree.raycast( this, raycaster, ray, intersects );\n\n\t\t}\n\n\t} else {\n\n\t\torigMeshRaycastFunc.call( this, raycaster, intersects );\n\n\t}\n\n}\n\nfunction computeBoundsTree( options ) {\n\n\tthis.boundsTree = new MeshBVH( this, options );\n\tthis.setIndex( this.boundsTree.index );\n\treturn this.boundsTree;\n\n}\n\nfunction disposeBoundsTree() {\n\n\tthis.boundsTree = null;\n\n}\n\nexport {\n\tMeshBVH, Visualizer,\n\tacceleratedRaycast, computeBoundsTree, disposeBoundsTree,\n\tCENTER, AVERAGE, SAH\n};\n"],"names":["xyzFields","boundingBox"],"mappings":"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"}